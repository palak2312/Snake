{"version":3,"sources":["logo.svg","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Board","LinkedListNode","val","this","value","next","useState","board","counter","i","rowOfBoard","j","push","Createboard","snakeCell","setSnakeCell","foodCell","setFoodCell","poisonCell","setPoisonCell","node","head","snake","show","setShow","handleGameOver","audioEl","document","getElementsByClassName","currentTime","play","setTimeout","pause","clearInterval","setRef","localStorage","setItem","JSON","stringify","FoodOrPoisonCell","valueNew","localStorageSnakeCell","parse","getItem","row","Math","floor","random","col","String","Choice","cellType","cellValue","temp","useEffect","console","log","createRowCol","rowCol","direction","nextHeadHandler","dir","nextCol","nextRow","isValid","moveSnakeHandler","keyNumber","dirc","setInterval","currHeadValue","nextHead","currHead","NodePrevToTail","tailValue","localStorageFoodCell","localStoragePoisonCell","volume","localStorageScore","Object","keys","length","IncreaseHeadOnEating","prev","reverseDirection","headNextValue","currHeadRow","currHeadCol","headNextRow","headNextCol","newDirection","window","addEventListener","e","keyCode","p","Modal","animation","Body","style","backgroundColor","textAlign","color","class","Button","onClick","location","reload","className","display","justifyContent","alignItems","height","src","Row","width","Col","sm","map","rowIndex","colIn","fluid","borderBottom","margin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cca3411a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { React, useState, useEffect } from \"react\"\r\n\r\nimport { Row, Col, Button, Modal } from \"react-bootstrap\"\r\n\r\n\r\n\r\n// import { Button } from \"bootstrap\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Board = () => {\r\n\r\n\r\n    class LinkedListNode {\r\n        constructor(val) {\r\n            this.value = val;\r\n            this.next = null;\r\n\r\n        }\r\n    }\r\n\r\n    class SinglyLinkedList {\r\n        constructor(val) {\r\n\r\n            const node = new LinkedListNode(val);\r\n            this.head = node;\r\n            // this.tail = node;\r\n\r\n        }\r\n    }\r\n\r\n    const [board, setBoard] = useState(Createboard());\r\n    const [snakeCell, setSnakeCell] = useState({ \"55\": 1 });\r\n    const [foodCell, setFoodCell] = useState(36);\r\n    const [poisonCell, setPoisonCell] = useState(-1);\r\n    const [snake, setSnake] = useState(new SinglyLinkedList(55));\r\n    const [show, setShow] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    var c = 0;\r\n\r\n\r\n    function handleGameOver() {\r\n        const audioEl = document.getElementsByClassName(\"audio-element\")[1]\r\n        audioEl.currentTime = 0;\r\n        // audioEl.volume = 1;\r\n        audioEl.play();\r\n        setTimeout(() => {\r\n            audioEl.pause();\r\n\r\n        }, 120)\r\n        clearInterval(setRef);\r\n\r\n        localStorage.setItem(\"gameOver\", JSON.stringify(true));\r\n        handleShow();\r\n\r\n\r\n\r\n    }\r\n\r\n    function handleGameWon() {\r\n\r\n    }\r\n\r\n    function gameRestart() {\r\n        console.log(\"hii i m game restart\")\r\n        // localStorage.setItem(\"gameOver\", JSON.stringify(false));\r\n\r\n\r\n        // localStorage.setItem(\"snakeCell\", JSON.stringify({ \"55\": 1 }));\r\n        // localStorage.setItem(\"foodCell\", JSON.stringify(36));\r\n        // localStorage.setItem(\"poisonCell\", JSON.stringify(-1));\r\n        handleClose();\r\n        // localStorage.setItem(\"gameOver\", JSON.stringify(false));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    // increasing length of snake while eating food/poison\r\n    function IncreaseHeadOnEating(dir) {\r\n        var localStorageScore = JSON.parse(localStorage.getItem(\"score\"));\r\n        localStorage.setItem(\"score\", JSON.stringify(localStorageScore + 4));\r\n        var currHeadValue = snake.head.value;\r\n        var currHeadRow = rowCol[String(currHeadValue)].row;\r\n        var currHeadCol = rowCol[String(currHeadValue)].col;\r\n\r\n        var { nextRow, nextCol, isValid } = nextHeadHandler(currHeadRow, currHeadCol, dir);\r\n        if (isValid) {\r\n\r\n            //    changing head of the linked list to the new head\r\n            const nextHead = new LinkedListNode(board[nextRow - 1][nextCol - 1]);\r\n            var currHead = snake.head;\r\n            nextHead.next = currHead;\r\n            snake.head = nextHead;\r\n            var localStorageSnakeCell = JSON.parse(localStorage.getItem(\"snakeCell\"));\r\n            localStorageSnakeCell = { ...localStorageSnakeCell, [String(snake.head.value)]: 1 };\r\n            if (Object.keys(localStorageSnakeCell).length == (12 * 14)) {\r\n                handleGameWon();\r\n            }\r\n            localStorage.setItem(\"snakeCell\", JSON.stringify(localStorageSnakeCell));\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n        else {\r\n            handleGameOver();\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    // to take randomly whether to put poison or food\r\n\r\n    function FoodOrPosionRandom() {\r\n\r\n        var temp = Math.floor(Math.random() * 2) + 1;\r\n        var Choice = (temp == 1) ? \"food-cell\" : \"poison-cell\";\r\n        return temp;\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    // choosing grid to display food/poison randomly\r\n\r\n    function FoodOrPoisonCell() {\r\n\r\n\r\n        var localStorageSnakeCell = JSON.parse(localStorage.getItem(\"snakeCell\"));\r\n\r\n        var valueNew;\r\n\r\n        // food/poison should not be on snake body\r\n        while (true) {\r\n            var row = Math.floor(Math.random() * 12) + 1;\r\n            var col = Math.floor(Math.random() * 14) + 1;\r\n            valueNew = board[row - 1][col - 1];\r\n\r\n            if (String(valueNew) in localStorageSnakeCell)\r\n                continue;\r\n            break;\r\n        }\r\n\r\n\r\n\r\n        var Choice = FoodOrPosionRandom();\r\n\r\n\r\n        if (Choice == 1) {\r\n            localStorage.setItem(\"foodCell\", JSON.stringify(valueNew));\r\n            localStorage.setItem(\"poisonCell\", JSON.stringify(-1));\r\n\r\n            setFoodCell(valueNew);\r\n            setPoisonCell(-1);\r\n\r\n        }\r\n        if (Choice == 2) {\r\n            localStorage.setItem(\"foodCell\", JSON.stringify(-1));\r\n            localStorage.setItem(\"poisonCell\", JSON.stringify(valueNew));\r\n\r\n            setPoisonCell(valueNew);\r\n            setFoodCell(-1);\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // To initiaze local storage only once at the restart and start of game \r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"hii \");\r\n        localStorage.setItem(\"snakeCell\", JSON.stringify(snakeCell));\r\n        localStorage.setItem(\"foodCell\", JSON.stringify(foodCell));\r\n        localStorage.setItem(\"poisonCell\", JSON.stringify(poisonCell));\r\n        localStorage.setItem(\"gameOver\", JSON.stringify(false));\r\n        localStorage.setItem(\"score\", JSON.stringify(0));\r\n\r\n\r\n\r\n\r\n    }, [c])\r\n\r\n\r\n\r\n\r\n\r\n    // to change the background color the cell which is having snake body\r\n\r\n    function cellType(cellValue) {\r\n\r\n        var localStorageSnakeCell = JSON.parse(localStorage.getItem(\"snakeCell\"));\r\n\r\n        let temp = \"\";\r\n        if (localStorageSnakeCell)\r\n            temp = String(cellValue) in localStorageSnakeCell ? \"snake-cell\" : \"\";\r\n\r\n        return temp;\r\n\r\n    }\r\n\r\n\r\n\r\n    // to find the row and col of the value of grid \r\n    const [rowCol, setRowCol] = useState(createRowCol());\r\n\r\n    function createRowCol() {\r\n        var temp = {};\r\n        let counter = 1;\r\n        for (let i = 1; i <= 12; i++) {\r\n\r\n            for (let j = 1; j <= 14; j++) {\r\n\r\n                temp[counter] = { \"row\": i, \"col\": j };\r\n                counter++;\r\n            }\r\n\r\n        }\r\n\r\n        return (temp);\r\n\r\n\r\n\r\n    }\r\n\r\n    // to create the board\r\n\r\n    function Createboard() {\r\n\r\n\r\n        let board = [];\r\n        let counter = 1;\r\n        for (let i = 0; i < 12; i++) {\r\n            let rowOfBoard = [];\r\n            for (let j = 0; j < 14; j++) {\r\n                rowOfBoard.push(counter);\r\n\r\n                counter++;\r\n            }\r\n            board.push(rowOfBoard);\r\n        }\r\n\r\n\r\n        return board;\r\n\r\n    }\r\n\r\n    // it will give what value should be incremented and value should be decremented from row and col while \r\n    // going to a particular direction\r\n\r\n    const [direction, setDirection] = useState({ \"37\": [-1, 0], \"38\": [0, -1], \"39\": [1, 0], \"40\": [0, 1] });\r\n\r\n    // it will provide rol and col and if it is valid(inside the grid or not ) of the next head\r\n\r\n    function nextHeadHandler(row, col, dir) {\r\n\r\n        let nextCol = col + direction[String(dir)][0];\r\n        let nextRow = row + direction[String(dir)][1];\r\n        let isValid = false;\r\n\r\n        if (nextCol >= 1 && nextCol <= 14 && nextRow >= 1 && nextRow <= 12) {\r\n            isValid = true;\r\n            return { nextRow, nextCol, isValid };\r\n        }\r\n        return { nextRow, nextCol, isValid };\r\n\r\n\r\n    }\r\n\r\n    // reverse the direction of snake on poison eating\r\n\r\n    function reverseDirection() {\r\n        var currHead = snake.head;\r\n\r\n\r\n\r\n        var prev = null;\r\n\r\n        var next;\r\n\r\n        while (currHead) {\r\n            next = currHead.next;\r\n            currHead.next = prev;\r\n            prev = currHead;\r\n            currHead = next;\r\n        }\r\n\r\n        snake.head = prev;\r\n\r\n    }\r\n\r\n    function newDirection() {\r\n        var currHeadValue = snake.head.value;\r\n        var headNextValue = snake.head.next.value;\r\n        var currHeadRow = rowCol[String(currHeadValue)].row;\r\n        var currHeadCol = rowCol[String(currHeadValue)].col;\r\n\r\n        var headNextRow = rowCol[String(headNextValue)].row;\r\n        var headNextCol = rowCol[String(headNextValue)].col;\r\n\r\n        if (currHeadCol === headNextCol) {\r\n            if (currHeadRow < headNextRow)\r\n                return 38;\r\n            if (currHeadRow > headNextRow)\r\n                return 40;\r\n        }\r\n        if (currHeadRow === headNextRow) {\r\n            if (currHeadCol < headNextCol)\r\n                return 37;\r\n            if (currHeadCol > headNextCol)\r\n                return 39;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    let setRef = null;\r\n\r\n    function moveSnakeHandler(keyNumber) {\r\n\r\n        var dirc = keyNumber;\r\n        setRef = setInterval(function moveSnake() {\r\n\r\n            var currHeadValue = snake.head.value;\r\n            var currHeadRow = rowCol[String(currHeadValue)].row;\r\n            var currHeadCol = rowCol[String(currHeadValue)].col;\r\n\r\n            var { nextRow, nextCol, isValid } = nextHeadHandler(currHeadRow, currHeadCol, dirc);\r\n            if (isValid) {\r\n\r\n                //    changing head of the linked list to the new head\r\n\r\n                var localStorageSnakeCell = JSON.parse(localStorage.getItem(\"snakeCell\"));\r\n\r\n                if (String(board[nextRow - 1][nextCol - 1]) in localStorageSnakeCell) {\r\n                    handleGameOver();\r\n                }\r\n\r\n                const nextHead = new LinkedListNode(board[nextRow - 1][nextCol - 1]);\r\n                var currHead = snake.head;\r\n                nextHead.next = currHead;\r\n                snake.head = nextHead;\r\n\r\n\r\n                // removing tail from the linked list\r\n                currHead = snake.head;\r\n\r\n                while (currHead.next.next) {\r\n                    currHead = currHead.next;\r\n                }\r\n\r\n                var NodePrevToTail = currHead;\r\n                var tailValue = currHead.next.value;\r\n                NodePrevToTail.next = null;\r\n\r\n                // adding value of the new node in localstorage for snakecell and removing tail value from it\r\n\r\n                var localStorageSnakeCell = JSON.parse(localStorage.getItem(\"snakeCell\"));\r\n                delete localStorageSnakeCell[String(tailValue)];\r\n\r\n                localStorageSnakeCell = { ...localStorageSnakeCell, [String(snake.head.value)]: 1 };\r\n                localStorage.setItem(\"snakeCell\", JSON.stringify(localStorageSnakeCell));\r\n\r\n                var localStorageFoodCell = JSON.parse(localStorage.getItem(\"foodCell\"));\r\n                var localStoragePoisonCell = JSON.parse(localStorage.getItem(\"poisonCell\"));\r\n\r\n\r\n                // check whether the head is on food / poison or not if yes then work accordingly\r\n                currHead = snake.head;\r\n                if ((currHead.value === localStorageFoodCell) || (currHead.value === localStoragePoisonCell)) {\r\n\r\n                    // console.log(audio.play());\r\n\r\n                    const audioEl = document.getElementsByClassName(\"audio-element\")[0]\r\n                    audioEl.currentTime = 0;\r\n                    audioEl.volume = 1;\r\n                    audioEl.play();\r\n                    setTimeout(() => {\r\n                        audioEl.pause();\r\n\r\n                    }, 500)\r\n\r\n\r\n                    IncreaseHeadOnEating(keyNumber);\r\n                    if (currHead.value === localStoragePoisonCell) {\r\n                        reverseDirection();\r\n                        console.log(\"New Head \" + snake.head.value);\r\n                        dirc = newDirection();\r\n                    }\r\n                    FoodOrPoisonCell();\r\n                }\r\n\r\n\r\n\r\n                console.log(\"I am snake Head \" + snake.head.value);\r\n\r\n                //  it will add new node of snake cell body to snakeCell Set and it also helps in rerendering the entire page\r\n                // so it is rendering cellType function as well hence it will give green color to all those we are visiting\r\n                setSnakeCell({ ...snakeCell, [String(snake.head.value)]: 1 });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n            else {\r\n\r\n                handleGameOver();\r\n\r\n            }\r\n        }, 150);\r\n\r\n    }\r\n\r\n\r\n\r\n    // it will handle direction change of snake while pressing key\r\n\r\n    useEffect(() => {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // adding evenet listener whenever key get pressed\r\n        window.addEventListener(\"keydown\", (e) => {\r\n            clearInterval(setRef);\r\n\r\n            const keyNumber = e.keyCode;\r\n            const validKey = String(keyNumber) in direction ? true : false;\r\n\r\n            if (validKey) {\r\n\r\n\r\n\r\n                var p = JSON.parse(localStorage.getItem(\"gameOver\"));\r\n                console.log(p);\r\n                (p == false) && moveSnakeHandler(keyNumber);\r\n\r\n            }\r\n\r\n\r\n\r\n        })\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Modal show={show} animation={false}>\r\n\r\n                <Modal.Body style={{ backgroundColor: \"#b61515\", textAlign: \"center\" }} >\r\n                    <div>Oops! Game Over <i style={{ color: \"yellow\" }} class=\"fas fa-frown\"></i></div>\r\n                    <Button onClick={() => { window.location.reload(); }} className=\"restartButton\">Restart Game</Button>\r\n                </Modal.Body>\r\n\r\n            </Modal>\r\n\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100vh\" }}>\r\n\r\n                {/* https://www.soundhelix.com/examples/mp3/SoundHelix-Song-13.mp3 */}\r\n                {/* https://s3-us-west-2.amazonaws.com/s.cdpn.io/242518/CB.mp3 */}\r\n\r\n\r\n\r\n                <audio className=\"audio-element\" src=\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-13.mp3\">\r\n\r\n                </audio>\r\n                <audio className=\"audio-element\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/242518/CB.mp3\">\r\n\r\n                </audio>\r\n                <Row style={{ width: \"100vw\" }}>\r\n\r\n                    <Col sm={8}><div className={\"whole_board\"} >\r\n\r\n\r\n\r\n\r\n                        {board.map((row, rowIndex) => {\r\n                            return (\r\n                                <Row className=\"board_row\">\r\n                                    { row.map((col, colIn) => {\r\n                                        return (\r\n\r\n                                            <Col key={col} className={cellType(col) != \"\" ? cellType(col) : \"cell-design\"}  >\r\n\r\n                                                {col === foodCell ? <i fluid style={{ color: \"red\" }} class=\"fas fa-apple-alt fa-2x\"></i> : col === poisonCell ? <i style={{ color: \"#cf10cf\" }} class=\"fas fa-bomb fa-2x\"></i> : col === snake.head.value ? <i class=\"fas fa-eye\"></i> : \"\"}\r\n                                                {/* {col === snake.head.value ? \"h\" : col} */}\r\n                                            </Col>\r\n\r\n\r\n                                        );\r\n\r\n                                    })}\r\n                                </Row>\r\n\r\n                            );\r\n                        })}\r\n\r\n\r\n                    </div></Col>\r\n                    <Col sm={2} >\r\n                        <h1 style={{ borderBottom: \"2px solid white\" }}>Score : {JSON.parse(localStorage.getItem(\"score\"))}</h1>\r\n                        <Row style={{ margin: \"10px\", borderBottom: \"2px solid white\" }}>\r\n                            <Col sm={3}><i fluid style={{ color: \"red\" }} class=\"fas fa-apple-alt fa-2x\"></i></Col>\r\n                            <Col>Move Snake to the same direction</Col>\r\n                        </Row>\r\n                        <Row style={{ margin: \"10px\", borderBottom: \"2px solid white\" }}>\r\n                            <Col sm={3}><i style={{ color: \"#cf10cf\" }} class=\"fas fa-bomb fa-2x\"></i></Col>\r\n                            <Col>Move Snake to the Reverse direction</Col>\r\n                        </Row>\r\n                        <Row style={{ textAlign: \"left\", margin: \"10px\", borderBottom: \"2px solid white\" }}>\r\n                            <ul>\r\n                                <li>\r\n                                    Looping will kill.\r\n                                </li>\r\n                                <li>\r\n                                    Banging to the wall will make him die.\r\n                                </li>\r\n\r\n                            </ul>\r\n\r\n                        </Row>\r\n                        <Row style={{ margin: \"10px\", borderBottom: \"2px solid white\" }}>\r\n                            Bonus Tip:\r\n                            <br></br>\r\n                            Don't approach the Boundary food directly towards the Boundary, It can kill you 💀⚡\r\n\r\n                        </Row>\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </div >\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Board from \"./Board\"\nimport Temp from \"./Temp\"\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n      {/* <Temp /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}